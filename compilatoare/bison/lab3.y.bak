%{
	#include<stdio.h>
	int yyerror(char *s);
	int yylex(void);
	extern int yydebug;
	extern FILE* yyin;

%}

%start program

%token id
%token assign_op
%token uop
%token logical_op
%token relational_op
%token op
%token incl
%token namesp
%token end
%token number
%token t_main
%token t_type
%token t_while
%token t_if
%token t_else
%token t_in
%token t_out
%token t_cin
%token t_cout
%token t_co
%token t_cc
%token ;
%% 

program	: antet t_main comp_stmt {printf("program\n");}
	;

antet	: incl  namesp		{printf("antet\n");}
	;

comp_stmt : t_co stmt_list t_cc  {;}
	;

stmt_list :			{ ; }
	  | stmt stmt_list	{ ; }
	  ;

stmt :	comp_stmt	{ ; }
     |	decl		{ ; }
     |  input		{ ; }
     |	output		{ ; }
     |	if_r		{ ; }
     |	loop		{ ; }
     |	end		{ ; }
     |	assign		{ ; }
     ;

decl :	t_type id ';'	{ printf("decl\n"); }
	;

assign : id assign_op expr ';' { ; }
	| id uop ';'		{ ; }
	| uop id ';'		{ ; }
	;

loop	: t_while '(' cond ')' stmt	{ ; }
	;

cond	: cond logical_op cond	{ ; }
	| expr relational_op expr { ; }
	;

expr	: id		{ printf("id\n"); }
	| expr op expr  { ; }
	| number	{ ; }
	;

if_r	: t_if '(' cond ')' stmt else_r	{ ; }
	;
	
else_r	:		{ ; }
	|t_else stmt  { ; }
	;

output : t_cout out_r ';'		{ ; }
	;

out_r	:			{ ; }
	| t_out expr out_r	{ ; }
	;
input : t_cin in_r ';'		{ ; }
	;

in_r	:			{ ; }
	| t_in id in_r		{ ; }
	;



%%
 int main()
{
 
 yyin = fopen("lab1/p1.cpp", "r");
 yydebug=1;
 return(yyparse());
}

int yyerror(s)
char *s;
{
  fprintf(stderr, "%s\n",s);
}
